策略模式（Strategy Pattern）是一种行为设计模式，它定义了一系列算法，并将每一个算法封装起来，使它们可以互换。
策略模式让算法的变化独立于使用算法的客户。

主要角色
策略接口（Strategy Interface）：
这是一个抽象类或接口，声明了所有支持的算法的共同方法。
具体策略类（Concrete Strategy Classes）：
实现了策略接口，提供了具体的算法实现。
上下文类（Context）：
维护一个策略对象的引用，在运行时可以动态地改变具体的策略对象，以执行不同的算法。
工作原理
创建策略接口：定义所有算法的共同行为。
实现具体策略类：每个具体策略类实现了策略接口，并提供了具体的算法实现。
上下文类：持有策略对象的引用，可以在运行时切换策略对象。
优点
算法自由切换：可以在运行时动态地改变算法，而不需要修改客户端代码。
扩展性好：通过增加新的策略类很容易扩展系统。
符合开闭原则：对扩展开放，对修改关闭。
缺点
策略类数量增多：如果算法很多，策略类的数量也会很多，增加了系统的复杂性。
策略切换开销：在客户端代码中动态地切换策略对象可能带来一定的性能开销。
代码
下面是一个简单的策略模式示例，假设我们有一个支付系统，支持多种支付方式（如信用卡支付、现金支付、支付宝支付）。

定义一个PaymentStrategy接口，并实现了三种具体的支付策略：CreditCardPayment、CashPayment和AlipayPayment。
ShoppingCart类作为上下文类，持有一个PaymentStrategy对象的引用，
并提供了setPaymentStrategy方法来动态地设置支付方式。客户端代码可以根据需要设置不同的支付方式，并进行支付操作。